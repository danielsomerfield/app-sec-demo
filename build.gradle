import groovy.sql.Sql

import java.security.MessageDigest

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'

sourceCompatibility = 1.8
version = '1.0'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

repositories {
    mavenCentral()
}

configurations { driver }

dependencies {

    def springVersion="4.0.1.RELEASE"
    def springSecurityVersion="3.2.5.RELEASE"
    def tomcatVersion="7.0.50"

    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:2.3.0"
    compile "com.fasterxml.jackson.core:jackson-databind:2.3.0"

    compile 'com.h2database:h2:1.4.182'
    compile 'javax.servlet:jstl:1.2'
    providedCompile "javax.servlet:javax.servlet-api:3.1.0"
    testCompile group: 'junit', name: 'junit', version: '4.11'
    driver 'com.h2database:h2:1.4.182'

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each { File file ->
    loader.addURL(file.toURI().toURL())
}

def buildTables() {
    runSqlStatements(
            [
                    '''CREATE TABLE IF NOT EXISTS directory_entry (
                        id BIGINT PRIMARY KEY AUTO_INCREMENT,
                        first_name  VARCHAR(255) NOT NULL,
                        last_name   VARCHAR(255) NOT NULL,
                        phone       VARCHAR(255) NOT NULL,
                        email       VARCHAR(255) NOT NULL,
                        statement   VARCHAR(255) NOT NULL
                    )''',

                    '''CREATE UNIQUE INDEX IF NOT EXISTS directory_entry_idx ON directory_entry(first_name, last_name)''',

                    '''CREATE TABLE IF NOT EXISTS application_user (
                        id INT PRIMARY KEY AUTO_INCREMENT,
                        username        VARCHAR(255) NOT NULL,
                        password_hash   VARCHAR(255) NOT NULL
                    )'''
            ]
    )
}

def dropTables() {
    runSqlStatements('DROP TABLE IF EXISTS directory_entry')
    runSqlStatements('DROP TABLE IF EXISTS application_user')
}

task rebuildDatabase << {
    dropTables()
    buildTables()
    doInserts()
}

def doInserts() {
    def x = 0;
    def idGenerator = {
        x++
    }
    runSqlStatements(
            [
                    insertEntry('Daniel', 'Somerfield', '212-555-1215', 'daniel@example.com', 'I code.', idGenerator),
                    insertEntry('Bob', 'Newhart', '501-555-3212', 'daniel@example.com', 'I joke.', idGenerator),
                    insertEntry('Richard', 'Stallman', '800-555-1111', 'daniel@example.com', 'I chastise.', idGenerator),
                    insertEntry('George', 'Lucas', '514-555-1231', 'daniel@example.com', 'I write screenplays. Badly..', idGenerator),
                    insertEntry('Ronald', 'Reagan', '212-555-0000', 'daniel@example.com', 'Tear down that wall.', idGenerator),
                    insertEntry('Tim', 'Conway', '512-555-6312', 'daniel@example.com', 'Heh.', idGenerator),
                    insertEntry('Richard', 'Marks', '655-555-0512', 'daniel@example.com', 'I miss the 80s.', idGenerator),
                    insertEntry('Vladamir', 'Proscule', '808-555-9835', 'daniel@example.com', 'I do not exist.', idGenerator),
                    insertEntry('Micky', 'Rourke', '405-555-5412', 'daniel@example.com', 'I act. Sometimes.', idGenerator),
                    insertEntry('Sebastian', 'Mariner', '716-555-8765', 'daniel@example.com', 'I Shake the Speare.', idGenerator),
                    insertEntry('Thomas', 'Beckett', '647-555-8653', 'daniel@example.com', 'I died in a cathedral.', idGenerator),
                    insertEntry('Ricky', 'Astley', '503-555-3211', 'daniel@example.com', 'I roll.', idGenerator),
                    insertUser('daniel', 'mypassword', idGenerator),
                    insertUser('admin', 'admin', idGenerator),
                    insertUser('admin1', 'admin', idGenerator)
            ]
    )
}

def insertUser(username, password, idGenerator) {
    return String.format("INSERT INTO application_user (id, username, password_hash) VALUES (%s, '%s', '%s')",
            idGenerator(), username, hashPassword(password))
}

def hashPassword(password) {
    MessageDigest m = MessageDigest.getInstance("MD5")
    m.update(password.getBytes("UTF-8"))
    toHex(m.digest())
}

def toHex(bytes) {
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < bytes.length; i++) {
        if ((0xff & bytes[i]) < 0x10) {
            sb.append('0');
        }
        sb.append(Integer.toHexString(0xff & bytes[i]));
    }
    return sb.toString();
}

def insertEntry(firstname, lastname, phone, email, statement, idGenerator) {
    return String.format("INSERT INTO directory_entry (id, first_name, last_name, phone, email, statement) VALUES " +
            "(%s, '%s', '%s', '%s', '%s', '%s')", idGenerator(), firstname, lastname, phone, email, statement)
}

def runSqlFunctions(sqlFunction) {
    def instance = Sql.newInstance("jdbc:h2:~/appsecdemo", "", "", "org.h2.Driver")
    try {
        sqlFunction(instance)
    } finally {
        instance.close()
    }

}

def runSqlStatements(sql) {
    if (sql instanceof String) {
        runSqlFunctions { conn -> conn.execute(sql) }
    } else {
        sql.each { s -> runSqlStatements(s) }
    }
}

tomcatRunWar.dependsOn rebuildDatabase
tomcatRun.dependsOn rebuildDatabase

println("*********************************")
println("Environment: " + System.getenv())
println("*********************************")


println("Port is set to " + System.getenv("PORT"))

if (System.getenv("PORT") != "") {
    tomcat {
        httpPort = Integer.parseInt(System.getenv("PORT"))
    }
}


task stage(dependsOn: ['clean', 'war']) {
    println("Running stage task.")
}
